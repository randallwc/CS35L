William Randall
homework 4

00000000000000000000000000000000000000000000000000000000000000000000000000000000

Q1 - Does the patch improve the performance of ls or make it worse? 
Briefly explain.

To test this I ran the two commands and got the outputs below.

$ time ./cs35L/assignment4/cu_files/coreutils-8.29/src/ls -aA

===output===
...
real	0m0.004s
user	0m0.000s
sys	0m0.002s
===end===

$ time ./cs35L/assignment4/cu_temp/bin/ls -aA

===output===
...
real	0m0.003s
user	0m0.000s
sys	0m0.002s
===end===

Then I looked in the patch file and saw that it deletes an if statement

===cuPatch===
-          if (ignore_mode == IGNORE_DEFAULT)
-            ignore_mode = IGNORE_DOT_AND_DOTDOT;
+          ignore_mode = IGNORE_DOT_AND_DOTDOT;
===end===

Because it removes the if statement it slightly improves the runtime of 
the ls command. It also doesn't need to print out '.' and '..' 
anymore which also reduces the time it takes for ls -aA.

Q2 - If your company adopts this patched version of Coreutils instead 
of the default one, what else should you watch out for? Might this new
version of Coreutils introduce other problems with your application?

If my company adopted this patched version we would have to make 
sure that all programs that relied on some version of the 'ls'
command will work the way we expect it.

For example, if we have a specific program that relies on the '-a' flag
overriding the '-A' flag we would have to make sure that we patch that
script so that it doesn't rely on this outdated version of core utils.

Q3 - What happens when this script is invoked with Python 3 rather than
Python 2, and why? (You can run Python 3 on the SEASnet hosts by using 
the command python3 instead of python.)

I download the script with the following command 

$ wget https://web.cs.ucla.edu/classes/spring20/cs35L/assign/randline.py

then I ran the command on an empty file with

$ python2 randline.py /dev/null

===output===
Traceback (most recent call last):
  File "randline.py", line 70, in <module>
    main()
  File "randline.py", line 64, in main
    sys.stdout.write(generator.chooseline())
  File "randline.py", line 34, in chooseline
    return random.choice(self.lines)
  File "/usr/local/cs/Python-2.7.17/lib/python2.7/random.py", 
	line 277, in choice
    return seq[int(self.random() * len(seq))]  
	# raises IndexError if seq is empty
IndexError: list index out of range
===end===

Because the file 'dev/null' is empty the randline.py script gets
'len(seq)' to be equal to 0.  This means it then attemps to read
in the value of the seq at index 0 (seq[0]) which accesses a position
in the sequence that is out of range, which throws the "IndexError".

Q4 - What happens when this script is invoked with Python 3 
rather than Python 2, and why?

To run the script on python3 I ran the command below

$ python3 randline.py /dev/null

===output===
  File "randline.py", line 65
    except IOError as (errno, strerror):
                      ^
SyntaxError: invalid syntax
===end===

This error happens becasue the syntax of line
65 was ok in python2 but in python3 it is no longer
supported.

Q5 - What happens when your shuf.py script is invoked with 
Python 2 rather than Python 3, and why?

If I invoke my shuf.py script with Python2 instead of python3
It works the same as if it was ran with Python3.
This is becasue of the backwards compatability of Python3
with a Python2 interpreter.

I tested this by running these commands and others with
more options but these are the basic tests I ran on a
file named will with 50 lines that are each different

$ python2 shuf.py will | sort -u > s2
$ python3 shuf.py will | sort -u > s3
$ diff s2 s3

This diff command outputted nothing even whe I tried
adding more options to the shuf.py script 
